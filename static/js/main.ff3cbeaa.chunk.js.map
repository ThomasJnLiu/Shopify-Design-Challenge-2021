{"version":3,"sources":["logo.svg","components/MoviesCard.js","components/MoviesGrid.js","components/Search.js","components/Nominations.js","App.js","reportWebVitals.js","index.js"],"names":["MoviesCard","movie","key","onAdd","isNominated","className","src","Poster","Title","Year","onClick","class","MoviesGrid","newMovies","nominations","undefined","map","index","find","x","imdbID","console","log","Search","getResult","useState","text","setText","movies","setMovies","SearchMovie","a","axios","result","data","useEffect","type","placeholder","value","onChange","event","q","target","autoFocus","Nominations","onRemove","length","App","setNominations","r","nomMovie","nom2","indexOf","splice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff3cbeaa.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\nimport NominateButton from \"./NominateButton\";\r\n\r\nconst MoviesCard = ({ movie, key, onAdd, isNominated }) => {\r\n  if (isNominated) {\r\n    return (\r\n      <div className=\"movies-card\" key={key}>\r\n        <img src={movie.Poster} />\r\n        <h1>{movie.Title}</h1>\r\n        <h2>{movie.Year}</h2>\r\n        <p>View on IMDB</p>\r\n        <button onClick={() => onAdd(movie)} class=\"nominate-button-disabled\">\r\n          <p>Nominated</p>\r\n        </button>\r\n        {/* <NominateButton onAdd={onAdd} /> */}\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"movies-card\" key={key}>\r\n        <img src={movie.Poster} />\r\n        <h1>{movie.Title}</h1>\r\n        <h2>{movie.Year}</h2>\r\n        <p>View on IMDB</p>\r\n        <button onClick={() => onAdd(movie)} class=\"nominate-button\">\r\n          <p>Nominate</p>\r\n        </button>\r\n        {/* <NominateButton onAdd={onAdd} /> */}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default MoviesCard;\r\n","import React from \"react\";\r\nimport MoviesCard from \"./MoviesCard\";\r\n\r\nconst MoviesGrid = ({ newMovies, onAdd, nominations }) => {\r\n  if (newMovies === undefined) {\r\n    return (\r\n      <>\r\n        <div className=\"movies\">undefined</div>\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"movies\">\r\n        {newMovies.map((movie, index) => {\r\n          const alreadyNominated = nominations.find(\r\n            (x) => x.imdbID === movie.imdbID\r\n          );\r\n          if (alreadyNominated) {\r\n            console.log(movie.Title + \" is nominated\");\r\n            return (\r\n              <>\r\n                <MoviesCard\r\n                  key={index}\r\n                  movie={movie}\r\n                  onAdd={onAdd}\r\n                  isNominated\r\n                />\r\n              </>\r\n            );\r\n          }\r\n          return (\r\n            <>\r\n              <MoviesCard key={index} movie={movie} onAdd={onAdd} />\r\n            </>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n  // if (newMovies === undefined) {\r\n  // } else {\r\n  //   return (\r\n  //     <div>\r\n  //       {newMovies.map((movie, index) => {\r\n  //         <h1 key={index}>{movie.Title}</h1>;\r\n  //       })}\r\n  //     </div>\r\n  //   );\r\n  // }\r\n};\r\n\r\nexport default MoviesGrid;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport MoviesGrid from \"./MoviesGrid\";\r\n\r\nconst Search = ({ getResult }) => {\r\n  const [text, setText] = useState(\"\");\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  const OnChange = (q) => {\r\n    setText(q);\r\n  };\r\n\r\n  const SearchMovie = async () => {\r\n    const result = await axios(\r\n      `http://www.omdbapi.com/?apikey=e95d3a07&s=${text}`\r\n      // `http://www.omdbapi.com/?apikey=e95d3a07&s=avengers`\r\n    );\r\n    setMovies(result.data.Search);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getResult(movies);\r\n  }, [movies]);\r\n\r\n  return (\r\n    <div className=\"search\">\r\n      <form>\r\n        <h1>Movie Title</h1>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search movies\"\r\n          value={text}\r\n          onChange={(event) => OnChange(event.target.value)}\r\n          autoFocus\r\n        />\r\n      </form>\r\n      <button onClick={SearchMovie}>Search</button>\r\n      {/* <MoviesGrid newMovies={movies} /> */}\r\n      {/* {movies.map((movie, index) => (\r\n        <h1 key={index}>{movie.Title}</h1>\r\n      ))} */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { useEffect } from \"react\";\r\n\r\nconst Nominations = ({ movies, onRemove, nominations }) => {\r\n  return (\r\n    <div className=\"nominations\">\r\n      <h1>Nominations</h1>\r\n      {movies.length === 0 && <div>No Nominations</div>}\r\n\r\n      <ul>\r\n        {movies.map((movies, key) => {\r\n          return (\r\n            <li key={key}>\r\n              <button onClick={() => onRemove(movies)}>X</button>\r\n              {movies.Title}\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nominations;\r\n","import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport APIComponent from \"./components/APIComponent\";\nimport Search from \"./components/Search\";\nimport MoviesGrid from \"./components/MoviesGrid\";\nimport Nominations from \"./components/Nominations\";\nimport axios from \"axios\";\n\nconst App = () => {\n  const [movies, setMovies] = useState([]);\n  const [nominations, setNominations] = useState([]);\n  const onAdd = (nomMovie) => {\n    const exist = nominations.find((x) => x.imdbID === nomMovie.imdbID);\n    if (exist) {\n    } else {\n      if (nominations.length < 5) {\n        setNominations([...nominations, { ...nomMovie }]);\n      }\n    }\n    // if (exist) {\n    //   // setNominations(\n    //   //   // nominations.map((x) =>\n    //   //   //   x.id === nomMovie.id ? { ...exist, qty: exist.qty + 1 } : x\n    //   //   // )\n    //   // );\n    // } else {\n    // }\n  };\n\n  const onRemove = (nomMovie) => {\n    const nom2 = [...nominations];\n    const index = nom2.indexOf(nomMovie);\n\n    nom2.splice(index, 1);\n    setNominations(nom2);\n  };\n\n  useEffect(() => {\n    console.log({ nominations });\n  }, [nominations]);\n  // const url = \"http://www.omdbapi.com/?apikey=e95d3a07&s=\";\n  // const [query, setQuery] = useState(\"\");\n  // const [response, setResponse] = useState(false);\n  // const [data, setData] = useState(null);\n\n  // useEffect(() => {\n  //   const fetchitems = async () => {\n  //     const result = await axios(\n  //       `http://www.omdbapi.com/?apikey=e95d3a07&s=${query}`\n  //     );\n  //     if (result.data.Response) {\n  //       console.log(result.data.Search);\n  //       setResponse(result.data.Response);\n  //       setData(result.data);\n  //     }\n  //   };\n\n  //   fetchitems();\n  // }, [query]);\n\n  return (\n    <div className=\"App\">\n      <Search getResult={(r) => setMovies(r)} />\n      <div className=\"content\">\n        {\" \"}\n        <MoviesGrid\n          onAdd={onAdd}\n          newMovies={movies}\n          nominations={nominations}\n        />\n        <Nominations onRemove={onRemove} movies={nominations} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}