{"version":3,"sources":["components/Search.js","components/MoviesCard.js","components/MoviesGrid.js","components/Nominations.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["Search","getResult","useState","text","setText","movies","setMovies","SearchMovie","a","axios","result","data","useEffect","className","type","placeholder","value","onChange","event","q","target","autoFocus","onClick","MoviesCard","movie","key","onAdd","isNominated","src","Poster","class","Title","Year","rel","href","imdbID","MoviesGrid","newMovies","nominations","undefined","map","index","find","x","Nominations","onRemove","nominationCapped","console","log","length","window","alert","Header","process","App","setNominations","setNominationCapped","r","nomMovie","nom2","indexOf","splice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ee40f37.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst Search = ({ getResult }) => {\r\n  const [text, setText] = useState(\"\");\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  const OnChange = (q) => {\r\n    setText(q);\r\n  };\r\n\r\n  const SearchMovie = async () => {\r\n    const result = await axios(\r\n      // `https://www.omdbapi.com/?apikey=e95d3a07&s=${text}`\r\n      `https://www.omdbapi.com/?apikey=e95d3a07&s=batman`\r\n    );\r\n    setMovies(result.data.Search);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getResult(movies);\r\n  }, [movies]);\r\n\r\n  return (\r\n    <div className=\"search\">\r\n      <form>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search movies\"\r\n          value={text}\r\n          onChange={(event) => OnChange(event.target.value)}\r\n          autoFocus\r\n        />\r\n      </form>{\" \"}\r\n      <button onClick={SearchMovie}>\r\n        Search\r\n        {/* <img src={process.env.PUBLIC_URL + \"/search.png\"} />{\" \"} */}\r\n      </button>\r\n      {/* <input\r\n        onClick={SearchMovie}\r\n        alt=\"search\"\r\n        type=\"image\"\r\n        src={process.env.PUBLIC_URL + \"/search.png\"}\r\n      /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\r\n\r\nconst MoviesCard = ({ movie, key, onAdd, isNominated }) => {\r\n  if (isNominated) {\r\n    return (\r\n      <div className=\"movies-card\" key={key}>\r\n        <img src={movie.Poster} />\r\n        <button onClick={() => onAdd(movie)} class=\"nominate-button-disabled\">\r\n          <p>Nominated</p>\r\n        </button>\r\n        <h1>{movie.Title}</h1>\r\n        <h2>{movie.Year}</h2>\r\n        <a\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n          href={\"https://www.imdb.com/title/\" + movie.imdbID}\r\n        >\r\n          View on IMDB\r\n        </a>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"movies-card\" key={key}>\r\n        <img src={movie.Poster} />\r\n        <button onClick={() => onAdd(movie)} class=\"nominate-button\">\r\n          <p>Nominate</p>\r\n        </button>\r\n        <h1>{movie.Title}</h1>\r\n        <h2>{movie.Year}</h2>\r\n        <a\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n          href={\"https://www.imdb.com/title/\" + movie.imdbID}\r\n        >\r\n          View on IMDB\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default MoviesCard;\r\n","import React from \"react\";\r\nimport MoviesCard from \"./MoviesCard\";\r\n\r\nconst MoviesGrid = ({ newMovies, onAdd, nominations }) => {\r\n  if (newMovies === undefined) {\r\n    return (\r\n      <>\r\n        <div className=\"movies\">undefined</div>\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"movies\">\r\n        {newMovies.map((movie, index) => {\r\n          const alreadyNominated = nominations.find(\r\n            (x) => x.imdbID === movie.imdbID\r\n          );\r\n          if (alreadyNominated) {\r\n            return (\r\n              <>\r\n                <MoviesCard\r\n                  key={index}\r\n                  movie={movie}\r\n                  onAdd={onAdd}\r\n                  isNominated\r\n                />\r\n              </>\r\n            );\r\n          }\r\n          return (\r\n            <>\r\n              <MoviesCard key={index} movie={movie} onAdd={onAdd} />\r\n            </>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default MoviesGrid;\r\n","import React from \"react\";\r\n\r\nconst Nominations = ({ movies, onRemove, nominationCapped }) => {\r\n  console.log(nominationCapped);\r\n  return (\r\n    <div className=\"nominations\">\r\n      <h1>Nominations (Max 5)</h1>\r\n      {movies.length === 0 && <div>No Nominations</div>}\r\n\r\n      <ul>\r\n        {movies.map((movies, key) => {\r\n          return (\r\n            <li key={key}>\r\n              <button onClick={() => onRemove(movies)}>X</button>\r\n              {movies.Title}\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n      <button\r\n        onClick={() => {\r\n          if (nominationCapped)\r\n            window.alert(\"Your nominations have been submitted!\");\r\n        }}\r\n        className={\r\n          nominationCapped ? \"nominate-button\" : \"nominate-button-disabled\"\r\n        }\r\n      >\r\n        <p>Submit</p>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nominations;\r\n","import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      <img src={process.env.PUBLIC_URL + \"/logo-small.png\"} />\r\n      <div className=\"header-text\">\r\n        <h1>The Shoppies</h1>\r\n        <h2>Nominate your favourite movies!</h2>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Search from \"./components/Search\";\nimport MoviesGrid from \"./components/MoviesGrid\";\nimport Nominations from \"./components/Nominations\";\nimport Header from \"./components/Header\";\n\nconst App = () => {\n  const [movies, setMovies] = useState([]);\n  const [nominations, setNominations] = useState([]);\n  const [nominationCapped, setNominationCapped] = useState(false);\n  const onAdd = (nomMovie) => {\n    const exist = nominations.find((x) => x.imdbID === nomMovie.imdbID);\n    if (exist) {\n    } else {\n      if (nominations.length < 5) {\n        setNominations([...nominations, { ...nomMovie }]);\n      }\n    }\n  };\n\n  const onRemove = (nomMovie) => {\n    const nom2 = [...nominations];\n    const index = nom2.indexOf(nomMovie);\n\n    nom2.splice(index, 1);\n    setNominations(nom2);\n  };\n\n  useEffect(() => {\n    if (nominations.length === 5) {\n      setNominationCapped(true);\n    } else {\n      setNominationCapped(false);\n    }\n    console.log(nominationCapped);\n  }, [nominations]);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Search getResult={(r) => setMovies(r)} />\n      <div className=\"content\">\n        {/* empty div is here for grid layout, removing it will cause\n        movies to shift to left cells, there's 100% a better way to do this */}\n        <div className=\"filler\"></div>\n        <Nominations\n          onRemove={onRemove}\n          movies={nominations}\n          nominationCapped={nominationCapped}\n        />\n        <div className=\"movies-container\">\n          <MoviesGrid\n            onAdd={onAdd}\n            newMovies={movies}\n            nominations={nominations}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}